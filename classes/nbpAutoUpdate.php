<?php

/**
 * Auto Update Class. Performs checks for newer version of the plugin
 * @copyright (c) 2013, NewsBoard Plugin
 * @package WordPress
 * @subpackage NewsBoard Plugin FREE
 */
class nbpAutoupdate
{
    public $current_version, $update_path, $plugin_slug, $slug;

    /**
     * Class construct. Assigning vars and adding WP event filters.
     * @param Float $current_version - The current version of the plugin
     * @param String $update_path - URL where we will listen for answer from
     * @param String $plugin_slug - The name of the plugin folder
     * @uses add_filter() - Hooks a function to a specific filter action.
     */
    function __construct($current_version, $update_path, $plugin_slug)
    {
        $this->current_version = $current_version;
        $this->update_path = $update_path;
        $this->plugin_slug = $plugin_slug;
        list ($t1, $t2) = explode('/', $plugin_slug);
        $this->slug = str_replace('.php', '', $t2);
        
        add_filter('pre_set_site_transient_update_plugins', array($this, 'check_update'));
        add_filter('plugins_api', array($this, 'check_info'), 10, 3);
    }

    /**
     * Checking for update.
     * @param Object $transient - Generated by WP
     * @return Object - The updated transient
     */
    public function check_update($transient)
    {
        if (empty($transient->checked))
            return $transient;
        
        $remote_version = $this->getRemote_version();
        
        if (version_compare($this->current_version, $remote_version, '<')) 
        {
            $obj = new stdClass();
            $obj->slug = $this->slug;
            $obj->new_version = $remote_version;
            $obj->url = $this->update_path;
            $obj->package = $this->update_path;
            $transient->response[$this->plugin_slug] = $obj;
        }
        return $transient;
    }

    /**
     * Checks for info about the new version
     * @return Boolean/Object
     */
    public function check_info($false, $action, $arg)
    {
        if ($arg->slug === $this->slug) 
        {
            $information = $this->getRemote_information();
            $information->slug = $this->slug;
            return $information;
        }
        return false;
    }

    /**
     * Connects with the site of the plugin and checks for news versions
     * @uses wp_remote_post WP function to POST data to Remote Servers
     * @return Boolean/String - Code or false (if error appears)
     */
    public function getRemote_version()
    {
        $request = wp_remote_post($this->update_path, array('body' => array('version' => $this->current_version)));
        
        if (!is_wp_error($request) || wp_remote_retrieve_response_code($request) === 200)
            return $request['body'];
        return false;
    }

    /**
     * Connects with the site of the plugin and checks for information of the new version
     * @uses wp_remote_post WP function to POST data to Remote Servers
     * @return Boolean/Array - Array with information or false (if error appears)
     */
    public function getRemote_information()
    {
        $request = wp_remote_post($this->update_path, array('body' => array('info' => 'get info')));
        
        if (!is_wp_error($request) || wp_remote_retrieve_response_code($request) === 200)
            return unserialize($request['body']);
        return false;
    }
    
}